name: Build, Push, and Deploy

on:
  push:
    branches:
      - main

env:
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PORT: ${{ secrets.DB_PORT }}
  NODE_HOST: ${{ secrets.NODE_HOST }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
  SENDER_EMAIL_HOST: ${{ secrets.SENDER_EMAIL_HOST }}
  SENDER_EMAIL_PORT: ${{ secrets.SENDER_EMAIL_PORT }}
  SENDER_EMAIL_ID: ${{ secrets.SENDER_EMAIL_ID }}
  SENDER_EMAIL_PASSWORD: ${{ secrets.SENDER_EMAIL_PASSWORD }}

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline

      - name: Build application
        run: npm run build:all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        uses: docker/bake-action@v4
        with:
          files: |
            ./docker-compose.prod.yml
          push: true
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      # - name: Copy docker-compose.yml to VPS
      #   uses: appleboy/scp-action@v0.1.4
      #   with:
      #     host: ${{ secrets.NODE_HOST }}
      #     username: ${{ secrets.SSH_USERNAME }}
      #     password: ${{ secrets.SSH_PASSWORD }}
      #     port: ${{ secrets.SSH_PORT }}
      #     source: './docker-compose.prod.yml'
      #     target: '/home/fitflow/mx'
      #     overwrite: true

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        env:
          COMPOSE_FILE: docker-compose.prod.yml
        with:
          host: ${{ secrets.NODE_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          envs: DB_PASSWORD,DB_USERNAME,DB_PORT,NODE_HOST,JWT_SECRET,FIREBASE_PRIVATE_KEY_ID,SENDER_EMAIL_HOST,SENDER_EMAIL_PORT,SENDER_EMAIL_ID,SENDER_EMAIL_PASSWORD
          script: |
            cd /home/fitflow/mx
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PORT=${{ secrets.DB_PORT }}
            export NODE_HOST=${{ secrets.NODE_HOST }}
            export JWT_SECRET=${{ secrets.JWT_SECRET }}
            export FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
            export SENDER_EMAIL_HOST=${{ secrets.SENDER_EMAIL_HOST }}
            export SENDER_EMAIL_PORT=${{ secrets.SENDER_EMAIL_PORT }}
            export SENDER_EMAIL_ID=${{ secrets.SENDER_EMAIL_ID }}
            export SENDER_EMAIL_PASSWORD=${{ secrets.SENDER_EMAIL_PASSWORD }}
            echo "${{ env.COMPOSE_FILE }}" > docker-compose.prod.yml
            docker compose -f docker-compose.prod.yml --profile prod down
            docker compose -f docker-compose.prod.yml --profile prod pull
            docker compose -f docker-compose.prod.yml --profile prod up -d

      # - name: Run db migrations
      #   run: npm run db:push
